{"version":3,"sources":["Sites/modules/NavigationBar/NavBar.js","Sites/main/main.js","Sites/modules/ImgQueue/imageModule/Image.js","Sites/modules/ImgQueue/ImgQueue.js","Sites/Filter/Filter.js","Sites/modules/PaletteDisplay/PaletteDisplay.js","Sites/palette/palette.js","routes.js","serviceWorker.js","index.js","Sites/Filter/Filter.module.css","Sites/main/main.module.css","Sites/palette/palette.module.css","Sites/modules/PaletteDisplay/PaletteDisplay.module.css","Sites/modules/ImgQueue/imageModule/Image.module.css","Sites/modules/ImgQueue/ImgQueue.module.css"],"names":["links","id","href","text","NavBar","props","state","isOpen","toggle","bind","this","setState","list","map","className","NavItem","key","NavLink","Navbar","color","dark","expand","sticky","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","Component","MainSite","classes","mainContainter","welcomeContainer","Jumbotron","title","subTitle","ButtonToolbar","Button","variant","button","Image_Card","background","selectedID","titleL","length","substring","MAX_LENGTH","Card","raised","card","style","backgroundColor","src","image","alt","img","CardTitle","ImageQueue","Queue","Image","url","name","CardDeck","tasks","Filter","selectedImages","task","loading","handleImageChange","e","selectedImage","target","files","l","prevState","URL","createObjectURL","processedImg","GetPostHandlers","clickOnImage","console","log","check_result","error","err","a","urls","host","post","data","form_data","FormData","append","axios","headers","timeout","then","res","processedID","image_id","url_result","procImage","index","findIndex","x","catch","filterSelected","selectedImg","sample","result","CircularProgress","retunedImg","CardImg","disabled","tmp","buttons","margin","container","fluid","jumbotron","root","Grid","spacing","item","choosingImage","xs","accept","input","onChange","required","type","display","htmlFor","component","md","temp","PaletteDiplays","colors","rgb","hex","toString","join","rgbToHex","Box","boxShadow","bgcolor","PrettoSlider","withStyles","height","thumb","width","border","marginTop","marginLeft","active","valueLabel","left","track","borderRadius","rail","Slider","Palette","currentResult","numberOfColors","palette","isProcessed","numberOfColor","sliderChanged","event","newValue","selectedImgs","forEach","results","splice","resultImg","step","valueLabelDisplay","min","max","aria-label","onChangeCommitted","defaultValue","basename","process","render","location","exact","path","App","Filters","Boolean","window","hostname","match","ReactDOM","routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.1896c62f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Navbar,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Collapse,\r\n    NavbarToggler\r\n} from 'reactstrap';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst links = [\r\n    { id: 1, href: '#palette', text: 'Palette' },\r\n    { id: 2, href: '#filters', text: 'Filters' },\r\n    { id: 3, href: '#about', text: 'About' },\r\n];\r\n\r\nclass NavBar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const list = links.map(({ id, href, text, className }) => {\r\n            return <NavItem key={id}>\r\n                <NavLink href={href} className={className} >{text}</NavLink>\r\n            </NavItem>\r\n        })\r\n        return <Navbar color=\"dark\" dark expand=\"md\" sticky=\"top\">\r\n            <NavbarBrand href='/'>Imager</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle} />\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n                <Nav className=\"ml-auto\" navbar>\r\n                    {list}\r\n                </Nav>\r\n            </Collapse>\r\n        </Navbar>;\r\n\r\n    };\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from 'react';\r\nimport NavBar from '../modules/NavigationBar/NavBar';\r\nimport classes from './main.module.css';\r\nimport { Button, ButtonToolbar, Jumbotron } from \"react-bootstrap\";\r\n\r\nclass MainSite extends Component {\r\n\r\n\r\n    render() {\r\n        return <div className={classes.mainContainter}>\r\n            <NavBar />\r\n            <div className={classes.welcomeContainer}>\r\n                <Jumbotron className={classes.welcomeContainer}>\r\n                    <h1 className={classes.title}>Getting Deeper Understanding</h1>\r\n                    <h1 className={classes.title}>your Images</h1>\r\n                    <p className={classes.subTitle}>This is a place to extract your images'\r\n                    features and \"make up\" it. If you want to create your palette,\r\n        simply go Palette section and upload your image, we will do the rest</p>\r\n                    <ButtonToolbar>\r\n                        <Button variant=\"outline-primary\" className={classes.button} href=\"#palette\">Palette</Button>\r\n                        <Button variant=\"outline-primary\" className={classes.button} href=\"#filters\">Image Filters</Button>\r\n                    </ButtonToolbar>\r\n                </Jumbotron>\r\n\r\n            </div>\r\n\r\n        </div>;\r\n    };\r\n};\r\n\r\nexport default MainSite;\r\n","import React from 'react';\r\nimport { Card } from '@material-ui/core';\r\nimport { CardTitle} from 'reactstrap';\r\nimport classes from './Image.module.css';\r\n\r\n// const Button = styled.button`\r\n//   background: palevioletred;\r\n//   border-radius: 3px;\r\n//   border: none;\r\n//   color: white;\r\n// \r\nconst MAX_LENGTH = 10\r\nconst Image_Card = (props) => {\r\n    const background = props.selectedID == props.id ? \"#379683\" : \"#EDF5E1\"\r\n    const titleL = props.title.length;\r\n    const title = titleL > MAX_LENGTH ? props.title.substring(0, MAX_LENGTH - 6) + \"...\" + props.title.substring(titleL - 6, titleL) : props.title;\r\n    return (\r\n        <Card raised onClick={() => props.onClick(props.id)} key={props.id} className={classes.card} style={{ backgroundColor: `${background}` }}>\r\n                <img src={props.image} alt=\"\" className={classes.img}/>  \r\n                <CardTitle>{title}</CardTitle>\r\n        </Card>\r\n\r\n    );\r\n};\r\n\r\nexport default Image_Card;","import React, {Component} from 'react';\r\nimport Image_Card from './imageModule/Image';\r\nimport classes from './ImgQueue.module.css';\r\nclass ImageQueue extends Component {\r\n\r\n    render() {\r\n    \r\n        // console.log(this.props.Queue.length);\r\n        let list = this.props.Queue.map((image) => {\r\n            return <Image_Card key={image.id} id={image.id} image={image.url} onClick={(id) => this.props.onClick(id)} title={image.image.name} selectedID={this.props.selectedID}></Image_Card>\r\n        });\r\n        \r\n        return ( <div className={classes.CardDeck}>\r\n                {list}\r\n            </div>\r\n           \r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageQueue;","import React, { Component } from 'react';\r\nimport NavBar from '../modules/NavigationBar/NavBar';\r\nimport ImageQueue from '../modules/ImgQueue/ImgQueue';\r\nimport { Jumbotron, ListGroup } from \"react-bootstrap\";\r\nimport classes from './Filter.module.css';\r\nimport axios from 'axios';\r\nimport { Card, CardImg, CardTitle } from 'reactstrap';\r\nimport { CircularProgress, Grid, Button } from \"@material-ui/core\";\r\n\r\nimport { GoPlus } from 'react-icons/go';\r\nimport { TiEquals } from 'react-icons/ti';\r\nconst tasks = [\"toGray\", \"Gaussian\", \"Detail\"]\r\n\r\n\r\nclass Filter extends Component {\r\n    state = {\r\n        selectedImages: [],\r\n        task: 'toGray',\r\n        selectedID: -1,\r\n        loading: false,\r\n    };\r\n\r\n    handleImageChange = (e) => {\r\n        const selectedImage = e.target.files[0];\r\n        let l = this.state.selectedImages.length;\r\n        if (l + 1 <= 20) {\r\n            this.setState((prevState) => ({\r\n                selectedImages: [...prevState.selectedImages,\r\n                {\r\n                    id: l,\r\n                    image: selectedImage,\r\n                    url: URL.createObjectURL(selectedImage),\r\n                    processedImg: {}\r\n                }],\r\n                selectedID: l,\r\n                loading: true\r\n            }));\r\n            this.GetPostHandlers(selectedImage, this.state.task, l);\r\n        }\r\n    };\r\n\r\n    clickOnImage = (id) => {\r\n        console.log(\"image\", this.state.selectedImages[id]);\r\n        this.setState({\r\n            selectedID: id,\r\n        });\r\n\r\n        try {\r\n            const check_result = this.state.selectedImages[id];\r\n            if (this.state.task in check_result.processedImg) {\r\n                console.log(check_result);\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    loading: true\r\n                })\r\n                this.GetPostHandlers(this.state.selectedImages[id].image, this.state.task, id);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(\"get error\");\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            try {\r\n                this.GetPostHandlers(this.state.selectedImages[id].image, this.state.task, id);\r\n            }\r\n            catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    GetPostHandlers = async (image, task, id) => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const urls = {\r\n            host: \"https://serverimage.herokuapp.com\",\r\n            post: 'https://serverimage.herokuapp.com/api/posts/'\r\n        }\r\n        let data = null;\r\n        let form_data = new FormData();\r\n        form_data.append('image', image);\r\n        form_data.append('task', task);\r\n        form_data.append(\"image_id\", id);\r\n        let url = urls.post;\r\n        axios.post(url, form_data, {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            },\r\n            timeout: 60 * 4 * 1000\r\n        })\r\n            .then(res => {\r\n                data = res.data;\r\n                console.log(data);\r\n                const processedID = data.image_id;\r\n                const url_result = data.url_result;\r\n                const task = data.task;\r\n                console.log(task);\r\n                // console.log(Math.ceil(res.data.count / res.data.results.length))\r\n                let procImage = [...this.state.selectedImages];\r\n                const index = procImage.findIndex(x => x.id === processedID);\r\n                // console.log(\"index\", index);\r\n                if (index !== -1) {\r\n                    procImage[index].processedImg[task] = urls.host + url_result;\r\n                    this.setState({\r\n                        selectedImages: [...procImage],\r\n                        loading: false\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n\r\n    };\r\n\r\n    filterSelected = (id) => {\r\n        console.log(\"Filter id\", tasks[id]);\r\n        console.log(\"image selected\", this.state.selectedID);\r\n        this.setState({\r\n            task: tasks[id]\r\n        });\r\n        try {\r\n\r\n            const check_result = this.state.selectedImages[this.state.selectedID];\r\n            if (tasks[id] in check_result.processedImg) {\r\n                console.log(check_result);\r\n                this.setState({\r\n                    loading: false\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    loading: true\r\n                })\r\n                this.GetPostHandlers(this.state.selectedImages[this.state.selectedID].image, tasks[id], this.state.selectedID);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(\"get error\");\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            try {\r\n                this.GetPostHandlers(this.state.selectedImages[this.state.selectedID].image, tasks[id], this.state.selectedID);\r\n            }\r\n            catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        // console.log(\"id\", this.state.selectedID);\r\n        const selectedImg = this.state.selectedImages[this.state.selectedID];\r\n        let sample = null;\r\n        let result = this.state.loading ? <CircularProgress color=\"secondary\" /> : null;\r\n        if (selectedImg) {\r\n            sample = <Card className={classes.retunedImg}>\r\n                <CardImg src={selectedImg.url} alt=\"Before\" ></CardImg>\r\n                <CardTitle disabled> Before </CardTitle>\r\n            </Card>\r\n            const tmp = selectedImg.processedImg[this.state.task];\r\n            if (tmp && !this.state.loading) {\r\n                result = <Card className={classes.retunedImg}>\r\n                    <CardImg src={tmp} alt=\"After\"></CardImg>\r\n                    <CardTitle disabled> After </CardTitle>\r\n                </Card>;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        const buttons = [\"To Gray\", \"Gaussian Blur\", \"Detail Enhance\"].map((name, key) => {\r\n            // console.log(key);\r\n            return <Button color=\"secondary\" variant=\"contained\" onClick={() => this.filterSelected(key)} key={key} style={{margin: \"1em\"}}>{name}</Button>\r\n        })\r\n        return (<div className={classes.container}>\r\n            <NavBar></NavBar>\r\n            <Jumbotron fluid className={classes.jumbotron}>\r\n                <h1 className={classes.title}>\r\n                    Filters\r\n                </h1>\r\n                <p className={classes.subTitle}>\r\n                    The place to make up your images\r\n                </p>\r\n                <p> You can upload up to 20 images</p>\r\n            </Jumbotron>\r\n            <div className={classes.root}>\r\n                <Grid container spacing={0}>\r\n                    <Grid item className={classes.choosingImage} xs={12}>\r\n                            <input\r\n                                accept=\"image/*\"\r\n                                className={classes.input}\r\n                                id=\"contained-button-file\"\r\n                                onChange={this.handleImageChange} required\r\n                                type=\"file\"\r\n                                style={{display: 'none'}}\r\n                            />\r\n                            <label htmlFor=\"contained-button-file\">\r\n                                <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                                    Select an image\r\n                                </Button>\r\n                            </label>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} md={4}/>\r\n                    <Grid item xs={10} md={4}>\r\n                        <ImageQueue Queue={this.state.selectedImages} onClick={this.clickOnImage} selectedID={this.state.selectedID === -1 ? 0 : this.state.selectedID} />\r\n                    </Grid>\r\n                    <Grid item xs={1} md={4}/>\r\n\r\n\r\n\r\n                </Grid>\r\n                {this.state.selectedImages.length === 0 ? null : <Grid container spacing={0}>\r\n                    <Grid item className={classes.choosingImage} xs={12} />\r\n\r\n                    <Grid item xs={4} className={classes.temp}>\r\n                        {sample}\r\n                    </Grid>\r\n                    <Grid item xs={1} className={classes.temp}> <GoPlus /> </Grid>\r\n                    <Grid item xs={2} className={classes.temp}> {buttons} </Grid>\r\n                    <Grid item xs={1} className={classes.temp}> <TiEquals /> </Grid>\r\n                    <Grid item xs={4} className={classes.temp}>\r\n                    {this.state.task}\r\n                        {result}\r\n                    </Grid>\r\n                </ Grid >}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\nexport default Filter;","import React from 'react';\r\nimport {Box} from \"@material-ui/core\";\r\nimport classes from './PaletteDisplay.module.css';\r\n\r\nconst PaletteDiplays = (props) => {\r\n    const rgbToHex = (rgb) => '#' + rgb.map(x => {\r\n        const hex = x.toString(16)\r\n        return hex.length === 1 ? '0' + hex : hex\r\n      }).join('')\r\n      \r\n    const list = props.colors? props.colors.map((color, index) => {\r\n        let rgb = rgbToHex(color);\r\n        // console.log(rgb);\r\n        return <div key={index} className={classes.card}>\r\n           <Box boxShadow={3} bgcolor={rgb} className={classes.Button}/>\r\n            {index+1}. {rgb}  \r\n        </div>;\r\n    }) : [];   \r\n    \r\n    return <div className={classes.container}>{list}</div>\r\n}\r\n\r\nexport default PaletteDiplays;","import React, { Component } from 'react';\r\nimport NavBar from '../modules/NavigationBar/NavBar';\r\nimport ImageQueue from '../modules/ImgQueue/ImgQueue';\r\nimport PaletteDiplays from '../modules/PaletteDisplay/PaletteDisplay';\r\nimport { Jumbotron } from \"react-bootstrap\";\r\nimport classes from './palette.module.css';\r\nimport axios from 'axios';\r\nimport { CircularProgress, Slider, withStyles, Grid, Button } from \"@material-ui/core\";\r\n// import {FiUpload} from 'react-icons/fi';\r\nconst PrettoSlider = withStyles({\r\n    root: {\r\n        color: '#52af77',\r\n        height: 8,\r\n    },\r\n    thumb: {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: '#fff',\r\n        border: '2px solid currentColor',\r\n        marginTop: -8,\r\n        marginLeft: -12,\r\n        '&:focus,&:hover,&$active': {\r\n            boxShadow: 'inherit',\r\n        },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n        left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n    rail: {\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n})(Slider);\r\n\r\nclass Palette extends Component {\r\n    state = {\r\n        selectedImages: [],\r\n        currentResult: [],\r\n        numberOfColors: 4,\r\n        selectedID: -1,\r\n        loading: false\r\n    };\r\n\r\n    handleImageChange = (e) => {\r\n        let selectedImage = e.target.files[0];\r\n        let l = this.state.selectedImages.length;\r\n        // console.log(selectedImage);\r\n        if (l + 1 <= 20) {\r\n            this.setState((prevState) => ({\r\n                selectedImages: [...prevState.selectedImages,\r\n                {\r\n                    id: l,\r\n                    image: selectedImage,\r\n                    url: URL.createObjectURL(selectedImage),\r\n                    palette: [],\r\n                    isProcessed: false\r\n                }],\r\n                selectedID: l\r\n            }));\r\n            this.GetPostHandlers(selectedImage, \"palette\", l);\r\n        }\r\n    };\r\n\r\n    clickOnImage = (id) => {\r\n        // console.log(id);\r\n        this.setState({\r\n            selectedID: id,\r\n            loading: true\r\n        })\r\n        if (this.state.selectedImages[id].palette && this.state.selectedImages[id].palette.length && this.state.selectedImages[id].isProcessed) {\r\n            this.setState({\r\n                currentResult: this.state.selectedImages[id].palette,\r\n                loading: false\r\n            })\r\n        } else {\r\n            this.GetPostHandlers(this.state.selectedImages[id].image, \"palette\", id);\r\n        }\r\n\r\n    }\r\n\r\n    GetPostHandlers = async (image, task, id) => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        console.log(\"number of colors\", this.state.numberOfColors);\r\n        const urls = {\r\n            host: \"https://serverimage.herokuapp.com\",\r\n            post: 'https://serverimage.herokuapp.com/api/posts/'\r\n        }\r\n        let data = null;\r\n        let form_data = new FormData();\r\n        form_data.append('image', image);\r\n        form_data.append('task', task);\r\n        form_data.append('numberOfColors', this.state.numberOfColors);\r\n        form_data.append(\"image_id\", id);\r\n        let url = urls.post;\r\n        axios.post(url, form_data, {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(res => {\r\n                data = res.data\r\n                let procImage = [...this.state.selectedImages];\r\n                const index = procImage.findIndex(x => x.id === id);\r\n                if (index !== -1) {\r\n                    procImage[index].palette = data;\r\n                    procImage[index].isProcessed = false;\r\n                    this.setState({\r\n                        selectedImages: [...procImage]\r\n                    });\r\n                }\r\n\r\n                console.log(res.data);\r\n                const res_numOfColor = res.data.numberOfColor;\r\n                if (res_numOfColor === this.state.numberOfColors) {\r\n                    const palette = res.data.palette;\r\n                    console.log(palette);\r\n                    this.setState({\r\n                        currentResult: palette,\r\n                        loading: false\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n\r\n    };\r\n    sliderChanged = (event, newValue) => {\r\n        console.log(newValue);\r\n        this.setState({\r\n            numberOfColors: newValue\r\n        })\r\n\r\n        let selectedImgs = [...this.state.selectedImages];\r\n        if (selectedImgs.length === 0) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        selectedImgs.forEach((image) => {\r\n            image.isProcessed = false\r\n        })\r\n\r\n        this.setState({\r\n            selectedImages: [...selectedImgs],\r\n        })\r\n\r\n        const selectedID = this.state.selectedID;\r\n        this.clickOnImage(selectedID);\r\n    }\r\n\r\n    render() {\r\n        const colors = [...this.state.currentResult];\r\n        const results = colors.splice(0, this.state.numberOfColors);\r\n        const resultImg = this.state.loading ? <CircularProgress color=\"secondary\" /> :\r\n            <PaletteDiplays colors={results}></PaletteDiplays>;\r\n\r\n        // console.log(\"id\", this.state.selectedID);\r\n        const selectedImg = this.state.selectedID >= 0 ? (\r\n            <img src={this.state.selectedImages[this.state.selectedID].url} alt=\"\" style={{ width: \"100%\",\r\n                height: \"auto\"}}/>) : null;\r\n        return (<div className={classes.container}>\r\n            <NavBar></NavBar>\r\n            <Jumbotron fluid className={classes.jumbotron}>\r\n                <h1 className={classes.title}>\r\n                    Palette\r\n                </h1>\r\n                <p className={classes.subTitle}>\r\n                    The place to get colors from your images\r\n                 </p>\r\n                <p> You can upload up to 20 images</p>\r\n            </Jumbotron>\r\n            <div className={classes.root}>\r\n                <Grid container spacing={0}>\r\n                    <Grid item className={classes.choosingImage} xs={12}>\r\n                        <PrettoSlider\r\n                            step={1}\r\n                            valueLabelDisplay=\"on\"\r\n                            min={2}\r\n                            max={9}\r\n                            aria-label=\"pretto slider\"\r\n                            onChange={(event, newValue) => {this.setState({numberOfColors: newValue})}}\r\n                            onChangeCommitted={this.sliderChanged} defaultValue={4}\r\n                            style={{ width: \"30%\" }} />\r\n                        <div style={{ margin: \"1em\" }}>The number of dominant colors: {this.state.numberOfColors}</div>\r\n                        <div>\r\n                        <input\r\n                                accept=\"image/*\"\r\n                                className={classes.input}\r\n                                id=\"contained-button-file\"\r\n                                onChange={this.handleImageChange} required\r\n                                type=\"file\"\r\n                                style={{display: 'none'}}\r\n                            />\r\n                            <label htmlFor=\"contained-button-file\">\r\n                                <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                                    Select an image\r\n                                </Button>\r\n                            </label>\r\n                        </div>\r\n    \r\n                    </Grid>\r\n                    <Grid item xs={1}  md={4}/>\r\n                    <Grid item xs={10} md={4}>\r\n                        <ImageQueue Queue={this.state.selectedImages} onClick={this.clickOnImage} selectedID={this.state.selectedID == -1 ? 0 : this.state.selectedID} />\r\n                    </Grid>\r\n                    <Grid item xs={1} md={4}/>\r\n\r\n                    <Grid item xs={1} />\r\n                    <Grid item xs={5} className={classes.retunedImg}>\r\n                        {selectedImg}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} />\r\n                    <Grid item xs={3} >  {resultImg}</Grid>\r\n                    <Grid item xs={1} />\r\n\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\nexport default Palette;","import React from 'react';\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport App from './Sites/main/main';\r\nimport Filters from './Sites/Filter/Filter';\r\nimport Palette from './Sites/palette/palette';\r\nexport default (\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n        <Route render={({ location }) => (\r\n            <Switch>\r\n                <Route exact path=\"/\" component={App} />\r\n                <Route exact path=\"/filters\" component={Filters} />\r\n                <Route exact path=\"/palette\" component={Palette} />\r\n                {/* <Route exact path=\"/about\" component={AboutMe} /> */}\r\n            </Switch>\r\n\r\n        )} />\r\n\r\n    </HashRouter>\r\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom';\nimport routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(routes,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"jumbotron\":\"Filter_jumbotron__FrzV8\",\"container\":\"Filter_container__2cjjo\",\"title\":\"Filter_title__1zxmv\",\"subTitle\":\"Filter_subTitle__a7iEV\",\"body\":\"Filter_body__aU3-S\",\"choosingImage\":\"Filter_choosingImage__1APFj\",\"retunedImg\":\"Filter_retunedImg__2bVJ2\",\"selected\":\"Filter_selected__3UjGP\",\"notSelected\":\"Filter_notSelected__o5w-f\",\"root\":\"Filter_root__17rUu\",\"temp\":\"Filter_temp__3tSkZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"welcomeContainer\":\"main_welcomeContainer__136zs\",\"title\":\"main_title__iQY6v\",\"subTitle\":\"main_subTitle__1UFGT\",\"mainContainter\":\"main_mainContainter__2Ymzm\",\"navBar\":\"main_navBar__3D_K9\",\"button\":\"main_button__2hPXZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"jumbotron\":\"palette_jumbotron__PY2SA\",\"container\":\"palette_container__1KSoE\",\"title\":\"palette_title__1PAw9\",\"subTitle\":\"palette_subTitle__3hGAq\",\"choosingImage\":\"palette_choosingImage__1YRHk\",\"retunedImg\":\"palette_retunedImg__14fKf\",\"root\":\"palette_root__3N_WV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"PaletteDisplay_card__35j2A\",\"container\":\"PaletteDisplay_container__2-n2e\",\"Button\":\"PaletteDisplay_Button__YQEG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Image_card__2797j\",\"img\":\"Image_img__1BzDD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardDeck\":\"ImgQueue_CardDeck__3AjKQ\"};"],"sourceRoot":""}